Project - 4 - C++ - Social Network Simulation




#include <iostream>
#include <vector>
#include <string>
#include <ctime>

class User {
public:
    std::string username;
    std::vector<User*> friends;

    User(const std::string& name) : username(name) {}

    void addFriend(User* friendUser) {
        friends.push_back(friendUser);
        friendUser->friends.push_back(this);
    }
    void displayFriends() const {
        std::cout << "Friends of " << username << ":\n";
        for (const auto& friendUser : friends) {
            std::cout << "- " << friendUser->username << "\n";
        }
    }
};

class SocialNetwork {
public:
    std::vector<User> users;

    void addUser(const std::string& name) {
        users.emplace_back(name);
    }

    void establishFriendships() {
        for (size_t i = 0; i < users.size(); ++i) {
            for (size_t j = i + 1; j < users.size(); ++j) {
                if (rand() % 2 == 0) {  // Randomly decide whether to be friends
                    users[i].addFriend(&users[j]);
                }
            }
        }
    }
};

int main() {
    srand(static_cast<unsigned>(time(0)));

    SocialNetwork socialNetwork;

    
    socialNetwork.addUser("Alice");
    socialNetwork.addUser("Bob");
    socialNetwork.addUser("Charlie");
    socialNetwork.addUser("David");
    socialNetwork.addUser("Eve");

    socialNetwork.establishFriendships();

    
    for (const auto& user : socialNetwork.users) {
        user.displayFriends();
        std::cout << "------------------------\n";
    }

    return 0;
}

This code provides a basic structure for a social network simulation. Users can be added to the network, friendships can be established randomly, and each user can display their friends.

Keep in mind that a complete social network simulation involves more features, such as posting, messaging, notifications, and user interactions. You can expand and enhance this code based on your project requirements and goals. Additionally, you might want to consider using data structures like graphs to represent the relationships between users more efficiently.

--------------------------------------------------------------

Explanation

1. User Class:

class User {
public:
    std::string username;
    std::vector<User*> friends;

    User(const std::string& name) : username(name) {

    }
    void addFriend(User* friendUser) {
        friends.push_back(friendUser);
        friendUser->friends.push_back(this);
    }


    void displayFriends() const {
        std::cout << "Friends of " << username << ":\n";
        for (const auto& friendUser : friends) {
            std::cout << "- " << friendUser->username << "\n";
        }
    }
};


This class represents a user in the social network. Each user has a username and a list of friends. The `addFriend` method is used to establish a mutual friendship between two users, and the `displayFriends` method is used to print the list of friends for a user.

--------------------------------------------------------------

2. SocialNetwork Class:

class SocialNetwork {
public:
    std::vector<User> users;
    void addUser(const std::string& name) {
        users.emplace_back(name);
    }

    
    void establishFriendships() {
        for (size_t i = 0; i < users.size(); ++i) {
            for (size_t j = i + 1; j < users.size(); ++j) {
                if (rand() % 2 == 0) {  // Randomly decide whether to be friends
                    users[i].addFriend(&users[j]);
                }
            }
        }
    }
};


This class represents the social network itself. It contains a vector of users and has methods to add users to the network (`addUser`) and establish random friendships between users (`establishFriendships`). The friendships are established based on a random condition (in this case, using `rand() % 2 == 0`), simulating a basic way of determining whether two users become friends.

--------------------------------------------------------------

3. Main Function:

int main() {
    srand(static_cast<unsigned>(time(0)));

    
    SocialNetwork socialNetwork;

    
    socialNetwork.addUser("Alice");
    socialNetwork.addUser("Bob");
    socialNetwork.addUser("Charlie");
    socialNetwork.addUser("David");
    socialNetwork.addUser("Eve");

    
    socialNetwork.establishFriendships();

    
    for (const auto& user : socialNetwork.users) {
        user.displayFriends();
        std::cout << "------------------------\n";
    }

    return 0;
}


In the `main` function:
- `srand(static_cast<unsigned>(time(0)))` initializes the random number generator based on the current time.
- A `SocialNetwork` object is created.
- Users are added to the network.
- Friendships are established randomly between users.
- The friends of each user are displayed using the `displayFriends` method.

--------------------------------------------------------------

4. Output:

The output of the program will show the friends of each user based on the random friendships established:


Friends of Alice:
- Bob
- Charlie
- David
- Eve
------------------------
Friends of Bob:
- Alice
- Charlie
- Eve
------------------------
Friends of Charlie:
- Alice
- Bob
------------------------
Friends of David:
- Alice
- Eve
------------------------
Friends of Eve:
- Alice
- Bob
- David
------------------------

--------------------------------------------------------------



