Project - 4 - C++ - Social Network Simulation




#include <iostream>
#include <vector>
#include <string>
#include <ctime>

class User {
public:
    std::string username;
    std::vector<User*> friends;

    User(const std::string& name) : username(name) {}

    void addFriend(User* friendUser) {
        friends.push_back(friendUser);
        friendUser->friends.push_back(this);
    }
    void displayFriends() const {
        std::cout << "Friends of " << username << ":\n";
        for (const auto& friendUser : friends) {
            std::cout << "- " << friendUser->username << "\n";
        }
    }
};

class SocialNetwork {
public:
    std::vector<User> users;

    void addUser(const std::string& name) {
        users.emplace_back(name);
    }

    void establishFriendships() {
        for (size_t i = 0; i < users.size(); ++i) {
            for (size_t j = i + 1; j < users.size(); ++j) {
                if (rand() % 2 == 0) {  // Randomly decide whether to be friends
                    users[i].addFriend(&users[j]);
                }
            }
        }
    }
};

int main() {
    srand(static_cast<unsigned>(time(0)));

    SocialNetwork socialNetwork;

    
    socialNetwork.addUser("Alice");
    socialNetwork.addUser("Bob");
    socialNetwork.addUser("Charlie");
    socialNetwork.addUser("David");
    socialNetwork.addUser("Eve");

    socialNetwork.establishFriendships();

    
    for (const auto& user : socialNetwork.users) {
        user.displayFriends();
        std::cout << "------------------------\n";
    }

    return 0;
}


--------------------------------------------------------------

Explanation

1. User Class:

class User {
public:
    std::string username;
    std::vector<User*> friends;

    User(const std::string& name) : username(name) {

    }
    void addFriend(User* friendUser) {
        friends.push_back(friendUser);
        friendUser->friends.push_back(this);
    }


    void displayFriends() const {
        std::cout << "Friends of " << username << ":\n";
        for (const auto& friendUser : friends) {
            std::cout << "- " << friendUser->username << "\n";
        }
    }
};



--------------------------------------------------------------

2. SocialNetwork Class:

class SocialNetwork {
public:
    std::vector<User> users;
    void addUser(const std::string& name) {
        users.emplace_back(name);
    }

    
    void establishFriendships() {
        for (size_t i = 0; i < users.size(); ++i) {
            for (size_t j = i + 1; j < users.size(); ++j) {
                if (rand() % 2 == 0) {  // Randomly decide whether to be friends
                    users[i].addFriend(&users[j]);
                }
            }
        }
    }
};




--------------------------------------------------------------

3. Main Function:

int main() {
    srand(static_cast<unsigned>(time(0)));

    
    SocialNetwork socialNetwork;

    
    socialNetwork.addUser("Alice");
    socialNetwork.addUser("Bob");
    socialNetwork.addUser("Charlie");
    socialNetwork.addUser("David");
    socialNetwork.addUser("Eve");

    
    socialNetwork.establishFriendships();

    
    for (const auto& user : socialNetwork.users) {
        user.displayFriends();
        std::cout << "------------------------\n";
    }

    return 0;
}


--------------------------------------------------------------

4. Output:

The output of the program will show the friends of each user based on the random friendships established:


Friends of Alice:
- Bob
- Charlie
- David
- Eve
------------------------
Friends of Bob:
- Alice
- Charlie
- Eve
------------------------
Friends of Charlie:
- Alice
- Bob
------------------------
Friends of David:
- Alice
- Eve
------------------------
Friends of Eve:
- Alice
- Bob
- David
------------------------

--------------------------------------------------------------



