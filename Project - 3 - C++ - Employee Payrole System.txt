Employee Payrole System using C++




#include <iostream>
#include <fstream>
#include <iomanip>
#include <vector>

class Employee {
public:
    std::string name;
    int employeeId;
    double salary;

    Employee(const std::string& n, int id, double sal) : name(n), employeeId(id), salary(sal) {}

    void display() const {
        std::cout << "Employee ID: " << employeeId << "\nName: " << name << "\nSalary: $" << std::fixed << std::setprecision(2) << salary << std::endl;
    }
};

class PayrollSystem {
private:
    std::vector<Employee> employees;
    const std::string dataFileName = "employee_data.txt";

public:
    void addEmployee(const Employee& emp) {
        employees.push_back(emp);
        saveData();
    }

    void displayAllEmployees() const {
        for (const auto& emp : employees) {
            emp.display();
            std::cout << "-------------------------\n";
        }
    }

    void loadData() {
        std::ifstream inputFile(dataFileName);
        if (inputFile.is_open()) {
            employees.clear();
            std::string name;
            int employeeId;
            double salary;

            while (inputFile >> name >> employeeId >> salary) {
                employees.emplace_back(name, employeeId, salary);
            }

            inputFile.close();
        }
    }

    void saveData() const {
        std::ofstream outputFile(dataFileName);
        if (outputFile.is_open()) {
            for (const auto& emp : employees) {
                outputFile << emp.name << " " << emp.employeeId << " " << emp.salary << std::endl;
            }
            outputFile.close();
        }
    }
};

int main() {
    PayrollSystem payroll;
    payroll.loadData();

    // Example of adding an employee
    Employee emp1("John Doe", 101, 50000.0);
    payroll.addEmployee(emp1);

    // Example of displaying all employees
    payroll.displayAllEmployees();

    return 0;
}

-------------------------------------------------

Explanation

1. Header includes:
   
   #include <iostream>
   #include <fstream>
   #include <iomanip>
   #include <vector>
   
   These include statements bring in necessary headers for input/output operations (`iostream`), file handling (`fstream`), formatting output (`iomanip`), and dynamic arrays (`vector`).

-------------------------------------------------

2. Employee Class:
   
   class Employee {
   public:
       std::string name;
       int employeeId;
       double salary;

       Employee(const std::string& n, int id, double sal) : name(n), employeeId(id), salary(sal) {}

       void display() const {
           std::cout << "Employee ID: " << employeeId << "\nName: " << name << "\nSalary: $" << std::fixed << std::setprecision(2) << salary << std::endl;
       }
   };
   
   - This class represents an Employee with three attributes: `name`, `employeeId`, and `salary`.
   - The constructor (`Employee`) initializes the object with the provided values.
   - The `display` method prints the employee details.

-------------------------------------------------

3.PayrollSystem Class:
   class PayrollSystem {
   private:
       std::vector<Employee> employees;
       const std::string dataFileName = "employee_data.txt";

   public:
       // Methods go here...
   };
   
   - This class holds a collection of `Employee` objects in a vector.
   - It has a constant string `dataFileName` representing the filename for storing employee data.

-------------------------------------------------

4. PayrollSystem Methods:
   void addEmployee(const Employee& emp) {
       employees.push_back(emp);
       saveData();
   }

   void displayAllEmployees() const {
       for (const auto& emp : employees) {
           emp.display();
           std::cout << "-------------------------\n";
       }
   }

   void loadData() {
       std::ifstream inputFile(dataFileName);
       if (inputFile.is_open()) {
           employees.clear();
           std::string name;
           int employeeId;
           double salary;

           while (inputFile >> name >> employeeId >> salary) {
               employees.emplace_back(name, employeeId, salary);
           }

           inputFile.close();
       }
   }

   void saveData() const {
       std::ofstream outputFile(dataFileName);
       if (outputFile.is_open()) {
           for (const auto& emp : employees) {
               outputFile << emp.name << " " << emp.employeeId << " " << emp.salary << std::endl;
           }
           outputFile.close();
       }
   }
   
   - `addEmployee`: Adds an employee to the vector and saves the updated data.
   - `displayAllEmployees`: Displays details of all employees in the vector.
   - `loadData`: Loads employee data from a file into the vector.
   - `saveData`: Saves the employee data from the vector to a file.

-------------------------------------------------

5. Main Function:
   int main() {
       PayrollSystem payroll;
       payroll.loadData();

       // Example of adding an employee
       Employee emp1("John Doe", 101, 50000.0);
       payroll.addEmployee(emp1);

       // Example of displaying all employees
       payroll.displayAllEmployees();

       return 0;
   }
   
   - Creates an instance of `PayrollSystem` named `payroll`.
   - Calls `loadData` to load existing employee data from a file.
   - Adds a new employee (`emp1`) using `addEmployee`.
   - Displays all employees using `displayAllEmployees`.

-------------------------------------------------


Project Title: Employee Payroll System


Abstract:


Table of Contents:

1. Introduction
    1.1 Background
    1.2 Objective
    1.3 Scope


2. System Design
    2.1 Architecture Overview
    2.2 Class Diagram
    2.3 Data Flow Diagram
    2.4 UML Diagrams (if applicable)


3. Implementation
    3.1 Language and Tools Used
    3.2 Class Definitions
        - Employee Class
        - PayrollSystem Class
    3.3 Code Walkthrough
        - Adding an Employee
        - Displaying Employees
        - Loading and Saving Data
    3.4 Features and Functionality
        - Employee Management
        - Data Persistence
    3.5 Error Handling
        - Input Validation
        - File Handling Errors

4. Testing
    4.1 Unit Testing
    4.2 Integration Testing
    4.3 Test Cases and Results
    4.4 Limitations


5. Results and Discussion
    5.1 Achievements
    5.2 Challenges Faced
    5.3 Future Enhancements


6. User Guide
    6.1 Installation Instructions
    6.2 How to Add an Employee
    6.3 How to Display Employees


7. Conclusion


8. References

1. Introduction


1.1 Background:
Briefly describe the motivation behind developing 
the Employee Payroll System.


1.2 Objective:
Outline the specific goals and objectives of the project.


1.3 Scope:
Define the boundaries and limitations of the project.

2. System Design


2.1 Architecture Overview:
Provide a high-level overview of the system architecture.


2.2 Class Diagram:
Include a class diagram illustrating the relationships between classes.

2.3 Data Flow Diagram:
If applicable, provide a data flow diagram to depict the flow of information within the system.


2.4 UML Diagrams:
Include any additional UML diagrams that help in understanding the system structure.

3. Implementation


3.1 Language and Tools Used:
Specify the programming language (C++) and any other tools or libraries utilized.


3.2 Class Definitions

Employee Class:
Provide a detailed explanation of the Employee class, including attributes and methods.

PayrollSystem Class:
Explain the PayrollSystem class, its attributes, and methods.


3.3 Code Walkthrough:
Explain the key sections of the code, focusing on adding employees, displaying employees, and data persistence.


3.4 Features and Functionality:
Highlight the main features and functionalities of the Employee Payroll System.


3.5 Error Handling:
Describe how the system handles errors, especially input validation and file handling errors.

4. Testing


4.1 Unit Testing:
Explain the unit testing approach, including specific test cases for individual functions or methods.

4.2 Integration Testing:
Describe the integration testing process, ensuring that different components work together as expected.


4.3 Test Cases and Results:
Provide a list of test cases and their results.

4.4 Limitations:
Discuss any limitations or constraints identified during testing.


5. Results and Discussion


5.1 Achievements:
Summarize the project achievements and successful outcomes.

5.2 Challenges Faced:
Highlight any challenges or difficulties encountered during the development process.


5.3 Future Enhancements:
Suggest potential improvements or features that could be added in the future.


6. User Guide


6.1 Installation Instructions:
Provide step-by-step instructions for installing and running the Employee Payroll System.


6.2 How to Add an Employee:
Guide users on how to add a new employee to the system.


6.3 How to Display Employees:
Explain the process for displaying the details of all employees.


7. Conclusion

Summarize the overall project, reiterating key achievements and lessons learned.


8. References

Include references to any external resources, libraries, or frameworks used in the project.

Include screenshots, diagrams, and code snippets where necessary to enhance the clarity of your documentation. 

Additionally, tailor the content to meet the specific requirements set by your college for project reports.